Git版本控制系统是一个分布式的系统，是用来保存工程源代码历史状态的命令行工具。
保存点：Git的保存点可以追踪源码中的文件, 并能得到某一个时间点上的整个工程项目的状态；可以在该保存点将多人提交的源码合并, 也可以回退到某一个保存点上
Git离线操作性：Git可以离线进行代码提交，因此它称得上是完全的分布式处理，Git所有的操作不需要在线进行；这意味着Git的速度要比SVN等工具快得多，因为SVN等工具需要在线时才能操作，如果网络环境不好， 提交代码会变得非常缓慢
Git基于快照：SVN等老式版本控制工具是将提交点保存成补丁文件，Git提交是将提交点指向提交时的项目快照，提交的东西包含一些元数据(作者，日期，GPG等)。
Git的分支和合并：分支模型是Git最显著的特点，因为这改变了开发者的开发模式，SVN等版本控制工具将每个分支都要放在不同的目录中，Git可以在同一个目录中切换不同的分支
分支即时性：创建和切换分支几乎是同时进行的，用户可以上传一部分分支，另外一部分分支可以隐藏在本地，不必将所有的分支都上传到GitHub中去。
分支灵活性：用户可以随时创建、合并、删除分支，多人实现不同的功能，可以创建多个分支进行开发，之后进行分支合并，这种方式使开发变得快速、简单、安全。
安装说明：
（1）图标组件(Addition icons) : 选择是否创建桌面快捷方式
（2）桌面浏览(Windows Explorer integration) : 浏览源码的方法，使用bash 或者 使用Git GUI工具。
（3）关联配置文件 : 是否关联 git 配置文件, 该配置文件主要显示文本编辑器的样式。
（4）关联shell脚本文件 : 是否关联Bash命令行执行的脚本文件
（5）使用TrueType编码 : 在命令行中是否使用TruthType编码, 该编码是微软和苹果公司制定的通用编码

设置环境变量
Use Git from Git Bash only是Git自带命令行工具。
Use Git from the Windows Command Prompt 是 Windows命令行工具。
Use Git and optional Unix tools from the Windows Command Prompt是两者都有。
设置环境变量
选择使用什么样的命令行工具，一般情况下我们默认使用Git Bash即可：
（1）Git自带：使用Git自带的Git Bash命令行工具。
（2）系统自带CMD：使用Windows系统的命令行工具。
（3）二者都有：上面二者同时配置，但是注意，这样会将windows中的find.exe 和 sort.exe工具覆盖，如果不懂这些尽量不要选择。
选择提交的时候换行格式
（1）检查出windows格式转换为unix格式：将windows格式的换行转为unix格式的换行再进行提交。
（2）检查出原来格式转为unix格式：不管什么格式的，一律转为unix格式的换行再进行提交。
（3）不进行格式转换 : 不进行转换，检查出什么，就提交什么。
 　二：SVN与Git的最主要的区别？

　　SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。

　　Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。

Git是使用
因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。
　　注意：git config  --global 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱
例：$ git config --global user.name "sunguanyin"
$ git config --global user.email "2506372121@qq.com".
具体操作如下：
1.创建版本库
什么是版本库？版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。
windows下 
mkdir+名称==创建目录 。pwd是用于显示当前目录。 cd 是查找某个目录。
通过 git init命令把这个目录变成git可以管理的仓库 命令如下：git init。这样会多出来一个.git的目录，这个目录是git来跟踪管理版本的。
2.将文件添加到版本库中。
所有的版本控制系统，只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。
第一步使用命令 git add +文件名 将文件添加到暂存区中。没有提示说明添加成功。
第二步使用命令 git commit 告诉git把文件提交到仓库。命令如下： $ git commit -m "测试"。
然后使用git status来查看文件结果。
git diff +文件名 来查看修改内容。
3.版本回退。
使用 git log 显示最近到最远的提交日志。也可以使用 git log -pretty=oneline来显示。
回退到上一个版本命令第一种 git reset --hard HEAD^.第二中命令是 git reset --hard HEAD~n即可。
git reset --hard +版本号来回退。使用 git reflog 来查看版本号。git reset  --hard 6fcfc89来恢复了。使用 cat +文件名来查看文件内容。
4.git撤销修改和删除文件操作。
第一：如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。
　第二：我可以按以前的方法直接恢复到上一个版本。使用 git reset  --hard HEAD^
不想使用上面的2种方法，我想直接想使用撤销命令该如何操作呢？首先在做撤销之前，我们可以先用 git status 查看下当前的状态。
git checkout  -- file 可以丢弃工作区的修改。如：git checkout -- readme.txt
命令 git checkout --readme.txt 意思就是，把readme.txt文件在工作区做的修改全部撤销，这里有2种情况，如下：
readme.txt自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。
另外一种是readme.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。
　注意：命令git checkout -- readme.txt 中的 -- 很重要，如果没有 -- 的话，那么命令变成创建分支了。
删除文件。rm +文件名或者直接在目录下删除。然后直接commit从版本库中删除完成。
只要没有commit之前，如果想要在版本库中恢复此文件可以使用命令git checkout  -- b.txt恢复文件。
git工作区和暂存区的区别？
工作区：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴
版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。
使用Git提交文件到版本库有两步：
　第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。
　第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。
远程仓库
在了解之前，先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的
第一步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令：
　　ssh-keygen  -t rsa –C "2506372121@qq.com", id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
第二步：登录github,打开” settings”中的SSH Keys页面，然后点击“Add SSH Key”,填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容。
1.如何添加远程库
在本地的testgit仓库下运行命令：
　　git remote add origin https://github.com/tugenhua0707/testgit.git
使用 git push -u origin master把本地仓库分支master内容推送到元仓库。
由于远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以立刻在github页面中看到远程库的内容已经和本地一模一样了
只要本地作了提交，就可以通过如下命令：
　　git push origin master把本地master分支的最新修改推送到github上了
2. 如何从远程库克隆？
使用命令git clone克隆一个本地库了
创建与合并分支
每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。
首先，我们来创建dev分支，然后切换到dev分支上。命令如下：git checkout -b dev 创建并切换分支, git branch 查看当前分支。
git checkout 命令加上 –b参数表示创建并切换，相当于如下2条命令
　　git branch dev
　　git checkout dev
